import java.util.*;
class Node
{
    int data;
    Node left;
    Node right;
    Node(int val){
        this.data=val;
        this.left=null;
        this.right=null;
    }
}
class Tree
{
    public Node root=null;
    public void insert(int val){
        Node newNode= new Node(val);
        if(root==null)
        {
            root=newNode;
            return;
        }
        else
        {
             Node temp=root;
            while(true)
            {
               
                if(temp.data > newNode.data)
                {
                    if(temp.left==null)
                    {
                        temp.left=newNode;
                        break;
                    }
                    else
                    {
                        temp=temp.left;
                    }
                }
                else
                {
                    if(temp.right==null)
                    {
                        temp.right=newNode;
                        break;
                    }
                    else
                    {
                        temp=temp.right;
                    }
                }
            }
        }
    }
    public void pre(Node root){
       
        if(root!=null)
        {
         System.out.print(root.data+" ");
         pre(root.left);
         pre(root.right);
        }
    }
    public void pos(Node root){
        
        if(root!=null){
            pos(root.left);
            pos(root.right);
            System.out.print(root.data+" ");
        }
    }
    public void in(Node root) {
       
        if(root!=null){
            in(root.left);
            System.out.print(root.data+" ");
            in(root.right);
        }
    }
}
public class Main
{
	public static void main(String[] args) {
		Tree t=new Tree();
		t.insert(100);
		t.insert(70);
		t.insert(110);
		t.insert(11);
		t.insert(85);
		t.insert(105);
		t.insert(123);
		t.insert(7);
		t.insert(93);
		t.insert(18);
		t.insert(114);
		t.insert(115);
		t.insert(116);
		 System.out.println("Pre Order Traversal");
	    t.pre(t.root);
	    
	     System.out.println("\nPost Order Traversal");
	    t.pos(t.root);
	     System.out.println("\nIn Order Traversal");
		t.in(t.root);
	}
}
